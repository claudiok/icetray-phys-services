/**

@page phys-source-writing-stream-source-modules Writing new Stream Source Modules

@section phys-source-writing-stream-source-modules-intro Introduction

So, you want to write a new Stream Source module to read in data for an 
existing stream from some other source.  

Note that the reading of these docs will pre-suppose that you've already 
learned how to use existing Source modules and have read the page 
about their use: @ref phys-source-using-stream-source-modules

First, things first, you need to 
decide which stream you're going to fill, the Physics(Event) stream, 
the Monitoring stream, the DetectorStatus stream, the Calibration stream 
or the Geometry stream.

Once you've done that you need to create your source module for filling that
stream.  Your source module should inherit from the appropriate base 
source module for your stream, either I3PhysicsSource, I3MonitoringSource,
I3DetectorStatusSource, I3CalibrationSource, or I3GeometrySource.  Note that
each of these sources have pure virtual methods which you must implement.

@section phys-source-writing-stream-source-modules-ev_mon Filling the Monitoring or Event stream

If you want to implement the Monitoring or Event stream you will need to write
two methods.  To be concrete let's say you're writing something to fill the 
Event stream.  Then you need to write 'bool I3EventSource::MoreEvents()' which
is a method which says whether or not you're done sending out events.  You'll
also need to write 'EventPair I3EventSource::NextEvent()'  The EventPair is
just a I3Event, I3EventHeader combination.  This method should return a new
event/header pair each time it is called.  This method will be called
until 'MoreEvents' returns false.  Be sure that the I3EventHeader has a valid
StartTime as that time will be used to determine when the rest of the 
streams must be updated.

@section phys-source-writing-stream-source-modules-sta-cal-geom Filling the DetectorStatus, Calibration or Geometry streams

If you want to implement the DetectorStatus, Calibration or Geometry streams,
you will need to write one method.  To be concrete, let's say you're writing
the something to fill the DetectorStatus stream.  You will then need to write:
'DetectorStatusPair I3DetectorStatusSource::GetDetectorStatus(I3Time time)'.  
You should write this method to fetch the I3DetectorStatus and 
I3DetectorStatusHeader corresponding to the time that you are supplied with.
If you were reading the DetectorStatus from a file, you could ignore the 'time'
field since you would want that status to apply for all times.  Be sure to 
supply in your I3DetectorStatusHeader with a valid StartTime and EndTime 
because that is how the I3DetectorSource knows when the detector status that
you supply is no longer valid.

By default the I3DetectorStatusSource looks at the time of the next event and
the time of the most recent DetectorStaus when deciding when to call 
I3DetectorStatusSource::GetDetectorStatus(I3Time). If you would like to change
this logic, you may do so by overridding 
'bool I3DetectorStatus::IsDetectorStatusCurrent(I3Time time)' and put whatever
logic you want into that call.

*/
